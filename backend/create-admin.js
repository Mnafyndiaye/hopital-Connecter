require('dotenv').config(); // üî• Charge les variables d‚Äôenvironnement

const bcrypt = require('bcrypt');
const sequelize = require('./config/database');
const User = require('./models/User');

(async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();

    const existingAdmin = await User.findOne({ where: { username: 'admin' } });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Un administrateur existe d√©j√†.');
      return process.exit();
    }

    const hashedPassword = await bcrypt.hash('adminpass', 10);
    console.log('Hash g√©n√©r√© pour adminpass:', hashedPassword);
    await User.create(
        {
          username: 'admin',
          password: hashedPassword,
          role: 'admin',
        },
        {
          individualHooks: false // <<=== d√©sactive le hook beforeCreate
        }
      );
      
    console.log('Hash ins√©r√© en base :', hashedPassword);

    console.log('‚úÖ Compte administrateur cr√©√© :');
    console.log('   ‚û§ Nom d‚Äôutilisateur : admin');
    console.log('   ‚û§ Mot de passe : adminpass');
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l‚Äôadmin :', error);
  } finally {
    await sequelize.close();
    process.exit();
  }
})();
